{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","components/GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","categ","type","value","placeholder","onChange","target","getGifs","category","a","url","fetch","resp","json","data","gifsImgs","map","img","id","title","images","downsized_medium","console","log","GifGridItem","className","src","alt","GifGrid","loading","customHookState","setCustomHookState","useEffect","then","useFetchGifs","GitExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"2MAsCeA,EAlCK,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EACHC,mBAAS,IADN,mBACjCC,EADiC,KACrBC,EADqB,KAiBzC,OACE,uBAAMC,SAZiB,SAAEC,GACzBA,EAAEC,iBAGEJ,EAAWK,OAAOC,QAAU,IAC9BR,GAAe,SAAAS,GAAK,OAAOP,GAAP,mBAAsBO,OAC1CN,EAAe,MAMjB,UACE,uBACEO,KAAK,OACLC,MAAQT,EACRU,YAAY,oBACZC,SArByB,SAAER,GAC/BF,EAAeE,EAAES,OAAOH,UAsBtB,+BAAQT,Q,+BC5BDa,EAAO,uCAAG,WAAQC,GAAR,uBAAAC,EAAA,6DACfC,EADe,iDACkCF,EADlC,+DAEFG,MAAOD,GAFL,cAEfE,EAFe,gBAGEA,EAAKC,OAHP,uBAGbC,EAHa,EAGbA,KACFC,EAAWD,EAAKE,KAAI,SAAEC,GAAU,IAAD,EACnC,MAAO,CACLC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXT,IAAG,UAAEO,EAAIG,cAAN,aAAE,EAAYC,iBAAiBX,QAGtCY,QAAQC,IAAKR,GAXQ,kBAcdA,GAdc,4CAAH,sDCCPS,EAAc,SAAC,GAAoB,IAAlBL,EAAiB,EAAjBA,MAAOT,EAAU,EAAVA,IACnC,OACE,sBAAKe,UAAU,iEAAf,UAIE,6BAAMN,IACN,qBAAKO,IAAMhB,EAAMiB,IAAMR,QCLhBS,EAAU,SAAC,GAAkB,IAAhBpB,EAAe,EAAfA,SAAe,ECCb,SAAEA,GAAe,IAAD,EAEIf,mBAAS,CACrDqB,KAAM,GACNe,SAAS,IAJ+B,mBAEnCC,EAFmC,KAElBC,EAFkB,KAgB1C,OATAC,qBAAU,WACRzB,EAASC,GAAWyB,MAAM,SAAAhB,GACxBc,EAAmB,CACjBjB,KAAMG,EACNY,SAAS,SAGZ,CAAErB,IAEEsB,EDL0BI,CAAc1B,GAAlCY,EAZ0B,EAY/BN,KAAae,EAZkB,EAYlBA,QAErB,OACE,qCACE,mCAAOrB,EAAP,OACEqB,GAAW,4CACb,qBAAKJ,UAAU,YAAf,SAEIL,EAAOJ,KAAK,SAAAC,GAAG,OACb,cAAC,EAAD,eAEOA,GADCA,EAAIC,aEJTiB,EAlBM,WAAM,MAEW1C,mBAAS,CAAE,SAFtB,mBAElB2C,EAFkB,KAEN5C,EAFM,KAGzB,OACE,qCACE,gDAEA,cAAC,EAAD,CAAaA,cAAgBA,IAC7B,uBACA,6BAEI4C,EAAWpB,KAAK,SAAAR,GAAQ,OAAI,cAAC,EAAD,CAA0BA,SAAWA,GAAtBA,YCTrD6B,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.6d235288.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types'\r\n\r\n// el metodo enviado desde otro componente se recive en los props\r\nconst AddCategory = ({ setCategories }) => {\r\n  const [ inputValue, setInputValue ] = useState('');\r\n  const handleChangeInputValue = ( e ) => {\r\n    setInputValue( e.target.value );\r\n  }\r\n\r\n  const handleSubmitForm = ( e ) => {\r\n    e.preventDefault();\r\n    // a qui se llama al metodo que se recive desde los props en el por referencia se tendra el listado de categorias.\r\n\r\n    if (inputValue.trim().length >= 2) {\r\n      setCategories( categ =>  [ inputValue, ...categ ] );\r\n      setInputValue( '' );\r\n    }\r\n\r\n  } \r\n\r\n  return (\r\n    <form onSubmit={ handleSubmitForm }>\r\n      <input \r\n        type=\"text\"\r\n        value={ inputValue }\r\n        placeholder=\"Ingrese un nombre\"\r\n        onChange={ handleChangeInputValue }\r\n      />\r\n      <span>{ inputValue }</span>\r\n    </form>\r\n  )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n  setCategories: PropTypes.func.isRequired\r\n}\r\n\r\nexport default AddCategory;","// esta logica sera llamada cada vez que se renderize el componente\r\nexport const getGifs = async ( category ) => {\r\n  const url = `https://api.giphy.com/v1/gifs/search?q=${ category }&limit=10&api_key=7SM7LI6h68pVODcz8pBQ5PvENBhhRHoX`;\r\n  const resp = await fetch( url );\r\n  const { data } = await resp.json();\r\n  const gifsImgs = data.map(( img ) => {\r\n    return {\r\n      id: img.id,\r\n      title: img.title,\r\n      url: img.images?.downsized_medium.url\r\n    }\r\n  });\r\n  console.log( gifsImgs );\r\n\r\n  //pasando el arreglo de images obtenido al estado\r\n  return gifsImgs;\r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ({ title, url }) => {\r\n  return (\r\n    <div className=\"card \r\n                    animate__animated \r\n                    animate__bounce\r\n                    animate__fadeIn\">\r\n      <h4>{ title }</h4>\r\n      <img src={ url } alt={ title } />\r\n    </div>\r\n  )\r\n}\r\n\r\n","import React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nexport const GifGrid = ({ category }) => {\r\n\r\n  // const [images, setImages] = useState([]);\r\n\r\n  // este hook permite que se dispare la peticion solo cuando nosotros querramos\r\n  // el primer callback es lo que se quiere que se haga, y el segundo parametro es la repeticion\r\n  // useEffect( () => {\r\n  //   getGifs( category )\r\n  //     .then( img => setImages( img ) )\r\n  //   // si el prop cambia se llamara de nuevo la peticion  \r\n  // }, [ category ]);  \r\n\r\n  const { data:images, loading } = useFetchGifs( category );\r\n\r\n  return (\r\n    <>\r\n      <h3> { category } </h3> \r\n      { loading && <p>Cargando...</p> }\r\n      <div className=\"card-grid\">\r\n        {\r\n          images.map( img => (\r\n            <GifGridItem \r\n              key={ img.id }\r\n              { ...img }\r\n            />\r\n          ))\r\n        }\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n","// Mi custom hook es esta funcion que serÃ¡ exportada\r\nimport { useEffect, useState } from \"react\"\r\nimport { getGifs } from \"../helpers/getGifs\";\r\n\r\n// esta puede usar otros hooks sin problemas \r\nexport const useFetchGifs = ( category ) => {\r\n\r\n  const [customHookState, setCustomHookState] = useState({\r\n    data: [],\r\n    loading: true\r\n  });\r\n\r\n  useEffect(() => {\r\n    getGifs( category ).then( img => {\r\n      setCustomHookState({\r\n        data: img,\r\n        loading: false\r\n      });\r\n    });\r\n  }, [ category ]);\r\n\r\n  return customHookState; // es la informacion que se le pasa al 'useState'\r\n\r\n}\r\n","import React, { useState } from 'react';\r\nimport AddCategory from './AddCategory';\r\nimport { GifGrid } from './GifGrid';\r\n\r\nconst GitExpertApp = () => {\r\n  // el listado de categorias se enviara por refencia a los compoenentes que se deseen\r\n  const [categories, setCategories] = useState([ 'Halo' ]);\r\n  return (\r\n    <>\r\n      <h2>Gif Expert App</h2>\r\n      {/* aqui se estan enviado por referencia las categorias y le metodo para guardar una nueva */}\r\n      <AddCategory setCategories={ setCategories } />\r\n      <hr />\r\n      <ol>\r\n        {\r\n          categories.map( category => <GifGrid key={ category } category={ category } />)\r\n        }\r\n      </ol>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default GitExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport GitExpertApp from './components/GifExpertApp';\n\nReactDOM.render(\n  <GitExpertApp />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}